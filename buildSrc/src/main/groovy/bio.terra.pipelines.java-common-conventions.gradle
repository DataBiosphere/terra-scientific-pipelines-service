plugins {
    id 'idea'
    id 'jacoco'
    id 'java'

    id 'com.diffplug.spotless'
    id 'org.hidetake.swagger.generator'
}

boolean isGithubAction = System.getenv().containsKey("GITHUB_ACTIONS")

if (!isGithubAction) {
    tasks.withType(JavaExec).configureEach {
        systemProperty 'spring.profiles.include', 'human-readable-logging'
    }
    tasks.withType(Test).configureEach {
        systemProperty 'spring.profiles.include', 'human-readable-logging'
    }
}

java {
    toolchain {
        languageVersion = JavaLanguageVersion.of(17)
    }
}

// If true, search local repository (~/.m2/repository/) first for dependencies.
def useMavenLocal = false
repositories {
    if (useMavenLocal) {
        mavenLocal() // must be listed first to take effect
    }
    maven {
        // Terra proxy for maven central
        url 'https://broadinstitute.jfrog.io/broadinstitute/maven-central/'
    }
    mavenCentral()
    maven {
        url 'https://broadinstitute.jfrog.io/broadinstitute/libs-release/'
    }
    maven {
        url 'https://broadinstitute.jfrog.io/broadinstitute/libs-snapshot-local/'
    }
}

// Spring Boot 3.2.4 pulls in opentelemetry-bom 1.31.0.
// It must have version >= 1.34.1 for compatibility with terra-common-lib 1.1.10:
ext['opentelemetry.version'] = '1.36.0'
// Spring Boot 3.2.4 pulls in io.netty:netty-bom 4.1.107.Final which is impacted by CVE-2024-29025.
ext['netty.version'] = '4.1.108.Final'

dependencies {
    compileOnly "com.google.code.findbugs:annotations:3.0.1"
    implementation 'org.slf4j:slf4j-api:2.0.12'

    testImplementation 'org.hamcrest:hamcrest:2.2'

    implementation 'bio.terra:terra-common-lib:1.1.35-SNAPSHOT'
    implementation platform('com.google.cloud:libraries-bom:26.33.0') // required for TCL

    implementation 'io.swagger.core.v3:swagger-annotations:2.2.12'

    swaggerCodegen 'io.swagger.codegen.v3:swagger-codegen-cli:3.0.47'
}

tasks.named('test') {
    useJUnitPlatform()
}

version = gradle.releaseVersion
group = 'bio.terra'

spotless {
    java {
        target 'src/*/java/**/*.java'
        googleJavaFormat()
    }
}

// Run spotless check when running in github actions, otherwise run spotless apply.
compileJava {
    if (isGithubAction) {
        dependsOn(spotlessCheck)
    } else {
        dependsOn(spotlessApply)
    }
}
