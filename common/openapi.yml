openapi: 3.0.3
info:
  title: Terra Scientific Pipelines Service
  version: 0.1.0
paths:
  /status:
    get:
      summary: Check status of the service.
      tags: [ public ]
      operationId: getStatus
      security: [ ]
      responses:
        200:
          description: OK
        500:
          $ref: '#/components/responses/ServerError'
        503:
          $ref: '#/components/responses/SystemStatusResponse'
  /version:
    get:
      summary: Get version info of the deployed service.
      tags: [ public ]
      operationId: getVersion
      security: [ ]
      responses:
        200:
          description: Version information
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/VersionProperties'
        404:
          description: "Version not configured"
        500:
          $ref: '#/components/responses/ServerError'


  # Specific terra scientific pipelines service queries will go here

  /api/pipelines/v1alpha1:
    get:
      summary: Return all available Pipelines
      operationId: getPipelines
      tags: [ pipelines ]
      responses:
        200:
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GetPipelinesResult'
        500:
          $ref: '#/components/responses/ServerError'


  /api/pipelines/v1alpha1/{pipelineId}:
    parameters:
      - $ref: '#/components/parameters/PipelineId'
    get:
      summary: Return info about the specified pipeline
      operationId: getPipeline
      tags: [ pipelines ]
      responses:
        200:
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Pipeline'
        400:
          $ref: '#/components/responses/BadRequest'
        500:
          $ref: '#/components/responses/ServerError'
    post:
      summary: Create new pipeline job
      operationId: createJob
      tags: [ pipelines ]
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateJobRequestBody'
      responses:
        200:
          description: Request is complete (succeeded or failed)
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CreateJobResponse'
        202:
          description: Job is running
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CreateJobResponse'
        400:
          $ref: '#/components/responses/BadRequest'
        403:
          $ref: '#/components/responses/PermissionDenied'
        404:
          $ref: '#/components/responses/NotFound'
        500:
          $ref: '#/components/responses/ServerError'

  /api/pipelines/v1alpha1/{pipelineId}/jobs:
    parameters:
      - $ref: '#/components/parameters/PipelineId'
      - $ref: '#/components/parameters/Limit'
      - $ref: '#/components/parameters/PageToken'
    get:
      summary: Retrieve all pipeline-specific jobs requested by user
      operationId: getPipelineJobs
      tags: [ pipelines ]
      responses:
        200:
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GetJobsResponse'
        400:
          $ref: '#/components/responses/BadRequest'
        500:
          $ref: '#/components/responses/ServerError'

  /api/job/v1alpha1/jobs:
    get:
      tags: [ jobs ]
      description: >-
        Returns a list of all of the jobs the caller has access to
      operationId: getAllJobs
      parameters:
        - $ref: '#/components/parameters/Limit'
        - $ref: '#/components/parameters/PageToken'
      responses:
        200:
            description: Success
            content:
              application/json:
                schema:
                  $ref: '#/components/schemas/GetJobsResponse'
        500:
          $ref: '#/components/responses/ServerError'


  /api/job/v1alpha1/jobs/{jobId}:
    summary: Retrieve specified job
    parameters:
      - $ref: '#/components/parameters/JobId'
    get:
      tags: [ jobs ]
      operationId: getJob
      responses:
        200:
          description: Job is complete (succeeded or failed)
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/JobReport'
        202:
          description: Job is running
          headers:
            Retry-After:
              description: >-
                optional - estimated seconds to wait before polling again. This allows
                a server to offer a hint as to when the job might be complete.
              schema:
                type: integer
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/JobReport'
        400:
          $ref: '#/components/responses/BadRequest'
        403:
          $ref: '#/components/responses/PermissionDenied'
        404:
          $ref: '#/components/responses/NotFound'


components:

  parameters:

    JobId:
      name: jobId
      in: path
      description: A UUID string identifier to used to identify a job in the service
      required: true
      schema:
        type: string
        format: uuid

    Limit:
      name: limit
      in: query
      description: The maximum number of items to return. Default 10
      required: false
      schema:
        type: integer
        minimum: 1
        default: 10

    PageToken:
      name: pageToken
      in: query
      description: A previously returned page token describing where to resume an enumeration.
      required: false
      schema:
        type: string

    PipelineId:
      name: pipelineId
      in: path
      description: A string identifier to used to identify a pipeline in the service.
      required: true
      schema:
        type: string

  responses:
    # Error Responses
    BadRequest:
      description: Bad request
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ErrorReport'
    PermissionDenied:
      description: Permission denied
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ErrorReport'
    NotFound:
      description: Not found (or unauthorized)
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ErrorReport'
    ServerError:
      description: Server error
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ErrorReport'
    SystemStatusResponse:
      description: A JSON description of the subsystems and their statuses.
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/SystemStatus'
    JobResultResponse:
      description: Result of a job (failed or succeeded)
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/JobResult'

  schemas:
    # Terra common schemas
    ErrorReport:
      type: object
      required: [ message, statusCode, causes ]
      properties:
        message:
          type: string
        statusCode:
          type: integer
        causes:
          type: array
          items:
            type: string

    VersionProperties:
      type: object
      properties:
        gitTag:
          type: string
        gitHash:
          type: string
        github:
          type: string
        build:
          type: string

    SystemStatus:
      required: [ ok, systems ]
      type: object
      properties:
        ok:
          type: boolean
          description: whether any system(s) need attention
        systems:
          type: object
          additionalProperties:
            type: object
            properties:
              ok:
                type: boolean
              messages:
                type: array
                items:
                  type: string

    # Async API schemas
    JobReport:
      type: object
      required: [ id, status, statusCode, resultURL ]
      properties:
        id:
          description: caller-provided unique identifier for the job
          type: string
        description:
          description: caller-provided description of the job
          type: string
        status:
          description: status of the job
          type: string
          enum: [ 'RUNNING', 'SUCCEEDED', 'FAILED' ]
        statusCode:
          description: HTTP code providing status of the job.
          type: integer
        submitted:
          description: timestamp when the job was submitted; in ISO-8601 format
          type: string
        completed:
          description: >-
            timestamp when the job completed - in ISO-8601 format. Present if
            status is SUCCEEDED or FAILED.
          type: string
        resultURL:
          description: >-
            URL where the result of the job can be retrieved. Equivalent to a
            Location header in HTTP.
          type: string

    JobControl:
      type: object
      required: [ id ]
      properties:
        id:
          description: >-
            Unique identifier for the job. Caller-provided UUID.
          type: string
        # In the future, notification configuration will also be part of JobControl.

    JobResult:
      type: object
      description: |
        The result of an async call that triggers a stairway job in TSPS.
      required: [ jobReport ]
      properties:
        jobReport:
          $ref: '#/components/schemas/JobReport'
        errorReport:
          $ref: '#/components/schemas/ErrorReport'

    # TSPS schemas; please keep alphabetized
    CreateJobRequestBody:
      description: |
        Object containing the user-provided information about a job request.
      type: object
      required: [ pipelineVersion, pipelineInputs ]
      properties:
        description:
          description: >-
            User-provided description of the job request.
          type: string
        pipelineVersion:
          $ref: "#/components/schemas/PipelineVersion"
        pipelineInputs:
          description: blob for pipeline inputs
          type: object

    CreateJobResponse:
      description: Result of an asynchronous pipeline job request.
      type: object
      required: [ jobReport ]
      properties:
        jobReport:
          $ref: '#/components/schemas/JobReport'
        errorReport:
          $ref: '#/components/schemas/ErrorReport'

    GetPipelinesResult:
      type: array
      items:
        $ref: '#/components/schemas/Pipeline'
      properties:
        Pipeline:
          $ref: '#/components/schemas/Pipeline'

    GetJobsResponse:
      description: result of a getJobs request
      type: object
      properties:
        totalResults:
          type: integer
        pageToken:
          type: string
        results:
          description: List of retrieved jobs
          type: array
          items:
            $ref: '#/components/schemas/JobReport'

    JobId:
      description: |
        Unique identifier (UUID) for a job request.
      type: string
      format: string

    JobStatus:
      description: |
        The current status of the job.
      type: string
      format: string

    JobTimeCompleted:
      description: |
        The time the job was completed.
      type: string
      format: string

    JobTimeSubmitted:
      description: |
        The time the job was submitted.
      type: string
      format: string

    Pipeline:
      description: |
        Object containing the id, display name, and description of a Pipeline.
      type: object
      required: [ pipelineId, displayName, description ]
      properties:
        pipelineId:
          $ref: "#/components/schemas/PipelineId"
        displayName:
          $ref: "#/components/schemas/PipelineDisplayName"
        description:
          $ref: "#/components/schemas/PipelineDescription"

    PipelineDescription:
      description: |
        The description for the Pipeline.
      type: string
      format: string

    PipelineDisplayName:
      description: |
        The display name for the Pipeline.
      type: string
      format: string

    PipelineId:
      description: |
        The identifier string for the Pipeline.
      type: string
      format: string

    PipelineVersion:
      description: |
        An identifier string for the Pipeline Version.
      type: string
      format: string

    UserId:
      description: |
        The identifier string for the user who submitted a job request.
      type: string
      format: string

  securitySchemes:
    bearerAuth:
      type: http
      scheme: bearer


security:
  - bearerAuth: [ ]
