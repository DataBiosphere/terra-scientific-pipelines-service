
import org.springframework.boot.gradle.plugin.SpringBootPlugin

plugins {
    id 'bio.terra.pipelines.java-spring-app-conventions'
    id 'de.undercouch.download'
    id 'com.google.cloud.tools.jib'
    id 'com.srcclr.gradle'
    id 'org.sonarqube'
    id 'com.jfrog.artifactory'
    id 'org.liquibase.gradle' version '2.2.1'
    id 'org.hidetake.swagger.generator'
    id 'org.springframework.boot'
    id 'io.spring.dependency-management'
    id 'com.gorylenko.gradle-git-properties' version '2.4.1'
    id 'jacoco'
}

apply from: 'publishing.gradle'
apply from: 'generators.gradle'

dependencyManagement {
    imports {
        mavenBom(SpringBootPlugin.BOM_COORDINATES)
    }
}

configurations {
    // https://stackoverflow.com/questions/76706612/standard-commons-logging-discovery-in-action-with-spring-jcl
    // resolves "Standard Commons Logging discovery in action with spring-jcl: please remove commons-logging.jar from classpath in order to avoid potential conflicts"
    configureEach {
        exclude group: 'commons-logging', module: 'commons-logging'
    }
}

dependencies {
    // Guava dependency
    constraints {
        implementation 'com.google.guava:guava:31.1-jre' // "-jre" for Java 8 or higher
    }
    implementation group: "com.google.guava", name:"guava"

    // Get stairway via TCL
    implementation "bio.terra:terra-common-lib" // 1.1.11-SNAPSHOT is defined in java-common-conventions

    // terra clients
    implementation "org.broadinstitute.dsde.workbench:sam-client_2.13:v0.0.213"
    implementation "org.broadinstitute.dsde.workbench:leonardo-client_2.13:1.3.6-22ee00b"
    implementation "org.databiosphere:workspacedataservice-client-okhttp-jakarta:0.2.115-20240227.195850-1"
    implementation "bio.terra:cbas-client:0.0.199"
    implementation "bio.terra:workspace-manager-client:0.254.1124-20240618.154106-1"
    implementation project(':rawls-client')

    implementation 'org.apache.commons:commons-dbcp2'
    implementation 'org.postgresql:postgresql:42.6.1'

    implementation 'com.google.auth:google-auth-library-oauth2-http'

    // https://projectlombok.org
    compileOnly 'org.projectlombok:lombok:1.18.20'
    annotationProcessor 'org.projectlombok:lombok:1.18.20'
    annotationProcessor group: "org.springframework.boot", name: "spring-boot-configuration-processor"

    // spring boot related dependencies
    implementation 'org.springframework.boot:spring-boot-starter-data-jpa'
    implementation'org.springframework.boot:spring-boot-starter-web'
    implementation 'org.springframework.retry:spring-retry'
    implementation 'org.springframework.boot:spring-boot-starter-validation'
    implementation 'org.springframework.boot:spring-boot-starter-thymeleaf'
    implementation 'org.springframework.boot:spring-boot-starter-actuator'

    // OpenTelemetry utilities for various HTTP clients - copied from WSM
    var openTelemetryVersion = '1.34.1'
    var openTelemetryInstrumentationVersion = '2.0.0'
    implementation "io.opentelemetry:opentelemetry-api:${openTelemetryVersion}"
    implementation "io.opentelemetry:opentelemetry-sdk:${openTelemetryVersion}"
    implementation "io.opentelemetry:opentelemetry-sdk-common:${openTelemetryVersion}"
    implementation "io.opentelemetry:opentelemetry-sdk-metrics:${openTelemetryVersion}"
    implementation "io.opentelemetry:opentelemetry-exporter-logging:${openTelemetryVersion}"
    implementation "io.opentelemetry.instrumentation:opentelemetry-spring-webmvc-6.0:${openTelemetryInstrumentationVersion}-alpha"
    implementation "io.opentelemetry.instrumentation:opentelemetry-instrumentation-annotations:${openTelemetryInstrumentationVersion}"
    implementation "io.opentelemetry.instrumentation:opentelemetry-spring-boot:${openTelemetryInstrumentationVersion}-alpha"

    // Google cloud open telemetry exporters
    var gcpOpenTelemetryExporterVersion = '0.27.0'
    implementation "com.google.cloud.opentelemetry:exporter-trace:${gcpOpenTelemetryExporterVersion}"
    implementation "com.google.cloud.opentelemetry:exporter-metrics:${gcpOpenTelemetryExporterVersion}"

    // gcs
    implementation platform('com.google.cloud:libraries-bom:26.44.0')
    implementation 'com.google.cloud:google-cloud-storage'

    liquibaseRuntime 'info.picocli:picocli:4.6.1'
    liquibaseRuntime 'org.postgresql:postgresql:42.6.1'

    annotationProcessor "org.springframework.boot:spring-boot-configuration-processor"

    // prometheus metrics
    implementation 'io.micrometer:micrometer-registry-prometheus'

    // sentry
    implementation 'io.sentry:sentry:7.3.0'

    testImplementation 'org.junit.jupiter:junit-jupiter-api'
    testImplementation('org.springframework.boot:spring-boot-starter-test') {
        // Fixes warning about multiple occurrences of JSONObject on the classpath
        exclude group: 'com.vaadin.external.google', module: 'android-json'
    }
    testImplementation 'org.mockito:mockito-inline:2.13.0'
    testImplementation 'org.apache.commons:commons-text:1.10.0'

    // dependencies for zonky embedded databases
    testImplementation 'io.zonky.test:embedded-database-spring-test:2.5.0'
    testImplementation 'org.awaitility:awaitility'
    testImplementation 'org.testcontainers:postgresql:1.17.3'

}
// workaround for local development
// set GOOGLE_APPLICATION_CREDENTIALS if this file exists - should only exist when
// write-config.sh is run.
// GOOGLE_APPLICATION_CREDENTIALS is set for us when running in a deployed environment
def googleCredentialsFile = "${rootDir}/config/teaspoons-sa.json"
bootRun {
    if(project.file(googleCredentialsFile).exists()) {
        environment.put("GOOGLE_APPLICATION_CREDENTIALS", "${googleCredentialsFile}")
    }
}

test {
    useJUnitPlatform ()
}

sonarqube {
    properties {
        property 'sonar.projectName', 'terra-scientific-pipelines-service'
        property 'sonar.projectKey', 'DataBiosphere_terra-scientific-pipelines-service'
        property 'sonar.organization', 'broad-databiosphere'
        property 'sonar.host.url', 'https://sonarcloud.io'
    }
}

jacocoTestReport {
    reports {
        // sonarqube requires XML coverage output to upload coverage data
        xml.required = true
    }
}

liquibase {
    activities {
        catalog {
            changeLogFile 'src/main/resources/db/changelog.xml'
            url 'jdbc:postgresql://localhost:5432/pipelines_db'
            username 'dbuser'
            password 'dbpwd'
            logLevel 'info'
        }
    }
}
